---
layout: post
title: 로그인 페이지 수정
summary: 열심히 기록하자!
author: Lee Chang Ho
date: '2020-12-02 22:58:00'
category: 프로젝트
published: true
image:  스프링부트.png
tags:   SpringBoot HTMLTemplate LoginPage
---

### 이전에 만든 로그인 페이지를 좀 이쁘게 만들어보자  

###### 나는 이 프로젝트를 진행하면서 사이트를 좀 더 완성도를 높이고자 HTML 무료 템플릿 사이트에서 껍데기를 가져오기로 결심하였다.  
###### 내가 참고한 사이트는 다음과 같다.  

+ https://bootsnipp.com/  

###### 여기에서 Free Template을 하나 골라서 다운로드를 받자. 나같은 경우에는 아래 사이트를 다운로드 받았다.  
![이미지]({{ site.url }}/images/무료템플릿.png)

###### 다운받은 파일을 압축을 풀어보면 "startbootstrap-sb-admin-2-gh-pages" 이라는 폴더 안에 "login.html" 페이지가 있을 것이다.  
###### 해당 파일을 열어보자.  
![이미지]({{ site.url }}/images/로그인페이지before.png)

###### login.html의 소스는 아래와 같다.  

```html
<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>SB Admin 2 - Login</title>

    <!-- Custom fonts for this template-->
    <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link
        href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet">

    <!-- Custom styles for this template-->
    <link href="css/sb-admin-2.min.css" rel="stylesheet">

</head>

<body class="bg-gradient-primary">

    <div class="container">

        <!-- Outer Row -->
        <div class="row justify-content-center">

            <div class="col-xl-10 col-lg-12 col-md-9">

                <div class="card o-hidden border-0 shadow-lg my-5">
                    <div class="card-body p-0">
                        <!-- Nested Row within Card Body -->
                        <div class="row">
                            <div class="col-lg-6 d-none d-lg-block bg-login-image"></div>
                            <div class="col-lg-6">
                                <div class="p-5">
                                    <div class="text-center">
                                        <h1 class="h4 text-gray-900 mb-4">Welcome Back!</h1>
                                    </div>
                                    <form class="user">
                                        <div class="form-group">
                                            <input type="email" class="form-control form-control-user"
                                                id="exampleInputEmail" aria-describedby="emailHelp"
                                                placeholder="Enter Email Address...">
                                        </div>
                                        <div class="form-group">
                                            <input type="password" class="form-control form-control-user"
                                                id="exampleInputPassword" placeholder="Password">
                                        </div>
                                        <div class="form-group">
                                            <div class="custom-control custom-checkbox small">
                                                <input type="checkbox" class="custom-control-input" id="customCheck">
                                                <label class="custom-control-label" for="customCheck">Remember
                                                    Me</label>
                                            </div>
                                        </div>
                                        <a href="index.html" class="btn btn-primary btn-user btn-block">
                                            Login
                                        </a>
                                        <hr>
                                        <a href="index.html" class="btn btn-google btn-user btn-block">
                                            <i class="fab fa-google fa-fw"></i> Login with Google
                                        </a>
                                        <a href="index.html" class="btn btn-facebook btn-user btn-block">
                                            <i class="fab fa-facebook-f fa-fw"></i> Login with Facebook
                                        </a>
                                    </form>
                                    <hr>
                                    <div class="text-center">
                                        <a class="small" href="forgot-password.html">Forgot Password?</a>
                                    </div>
                                    <div class="text-center">
                                        <a class="small" href="register.html">Create an Account!</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>

    </div>

    <!-- Bootstrap core JavaScript-->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Core plugin JavaScript-->
    <script src="vendor/jquery-easing/jquery.easing.min.js"></script>

    <!-- Custom scripts for all pages-->
    <script src="js/sb-admin-2.min.js"></script>

</body>

</html>
```

###### 자 그럼 이제 진행하던 프로젝트에 login.mustache파일을 하나 만들어주자. 그리고 위의 html소스를 Ctrl + C > Ctrl + V 하여 복붙을 한다. 기존에는 header영역과 footer영역을 나눈 mustache파일을 include하는 형태로 갔지만 login페이지의 경우 화면 구조가 다르기 때문에 독립적으로 간다.
###### 그 다음으로는 "startbootstrap-sb-admin-2-gh-pages" 폴더 아래에 css, img, js, vendor, scss 폴더를 resources/static 밑에 복사를 해준다.  
###### 그러고 나면 login.mustache 소스의 script, css 경로를 맞춰준다.  
```html
<!DOCTYPE html>
<html lang="en">

<head>


    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />

    <title>SB Admin 2 - Login</title>

    <!-- Custom fonts for this template-->
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">

    <!-- Custom styles for this template-->
    <link href="/css/sb-admin-2.min.css" rel="stylesheet">

    <!-- ZZangHo Custom CSS -->
    <link href="/css/zzangho/zzangho.css" rel="stylesheet">

</head>

<body class="bg-gradient-primary">

<div class="container">

        <!-- Outer Row -->
        <div class="row justify-content-center">

            <div class="col-xl-10 col-lg-12 col-md-9">

                <div class="card o-hidden border-0 shadow-lg my-5">
                    <div class="card-body p-0">
                        <!-- Nested Row within Card Body -->
                        <div class="row">
                            <div class="col-lg-6 d-none d-lg-block bg-login-image"></div>
                            <div class="col-lg-6">
                                <div class="p-5">
                                    <div class="text-center">
                                        <h1 class="h4 text-gray-900 mb-4">Welcome Back!</h1>
                                    </div>
                                    <form class="user">
                                        <div class="form-group">
                                            <input type="email" class="form-control form-control-user"
                                                id="exampleInputEmail" aria-describedby="emailHelp"
                                                placeholder="Enter Email Address...">
                                        </div>
                                        <div class="form-group">
                                            <input type="password" class="form-control form-control-user"
                                                id="exampleInputPassword" placeholder="Password">
                                        </div>
                                        <div class="form-group">
                                            <div class="custom-control custom-checkbox small">
                                                <input type="checkbox" class="custom-control-input" id="customCheck">
                                                <label class="custom-control-label" for="customCheck">Remember
                                                    Me</label>
                                            </div>
                                        </div>
                                        <a href="index.html" class="btn btn-primary btn-user btn-block">
                                            Login
                                        </a>
                                        <hr>
                                        <a href="index.html" class="btn btn-google btn-user btn-block">
                                            <i class="fab fa-google fa-fw"></i> Login with Google
                                        </a>
                                        <a href="index.html" class="btn btn-facebook btn-user btn-block">
                                            <i class="fab fa-facebook-f fa-fw"></i> Login with Facebook
                                        </a>
                                    </form>
                                    <hr>
                                    <div class="text-center">
                                        <a class="small" href="forgot-password.html">Forgot Password?</a>
                                    </div>
                                    <div class="text-center">
                                        <a class="small" href="register.html">Create an Account!</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>

    </div>

<!-- Bootstrap core JavaScript-->
<script src="/vendor/jquery/jquery.min.js"></script>
<script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

<!-- Core plugin JavaScript-->
<script src="/vendor/jquery-easing/jquery.easing.min.js"></script>

<!-- Custom scripts for all pages-->
<script src="/js/app/js/sb-admin-2.min.js"></script>

</body>

</html>
```

###### 나는 로그인 화면에서 로그인 입력 폼과 패스워드 찾기, 회원가입 등 필요없는 기능을 제거하기로 하였다. 아래의 빨간색으로 표시된 영역 말이다.  
![이미지]({{ site.url }}/images/로그인페이지before2.png)

###### HTML 소스에서 해당 부분을 지워주자. 그럼 아래와 같은 구조일 것이다.  
```html
<!DOCTYPE html>
<html lang="en">

<head>


    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />

    <title>SB Admin 2 - Login</title>

    <!-- Custom fonts for this template-->
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">

    <!-- Custom styles for this template-->
    <link href="/css/sb-admin-2.min.css" rel="stylesheet">

    <!-- ZZangHo Custom CSS -->
    <link href="/css/zzangho/zzangho.css" rel="stylesheet">

</head>

<body class="bg-gradient-primary">

<div class="container">

    <!-- Outer Row -->
    <div class="row justify-content-center">

        <div class="col-xl-10 col-lg-12 col-md-9">

            <div class="card o-hidden border-0 shadow-lg my-5">
                <div class="card-body p-0">
                    <!-- Nested Row within Card Body -->
                    <div class="row" style="height: 600px;">
                        <div class="col-lg-6 d-none d-lg-block bg-login-image"></div>
                        <div class="col-lg-6">
                            <div class="p-5">
                                <div class="text-center">
                                    <h1 class="h4 text-gray-900 mb-4">소셜 로그인으로 로그인 하세요!</h1>
                                </div>
                                <form class="user">
                                    <a href="/oauth2/authorization/google" class="btn btn-google btn-user btn-block">
                                        <i class="fab fa-google fa-fw"></i> Login with Google
                                    </a>
                                    <a href="/oauth2/authorization/naver" class="btn btn-naver btn-user btn-block">
                                        Login with Naver
                                    </a>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>

</div>

<!-- Bootstrap core JavaScript-->
<script src="/vendor/jquery/jquery.min.js"></script>
<script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

<!-- Core plugin JavaScript-->
<script src="/vendor/jquery-easing/jquery.easing.min.js"></script>

<!-- Custom scripts for all pages-->
<script src="/js/app/js/sb-admin-2.min.js"></script>

</body>

</html>
```

###### 위에서 설명을 못한 부분이 있는데 처음 템플릿에서는 Google 로그인 버튼과 Facebook 로그인 버튼이 존재하였다. 나는 Html의 class를 확인해 보니 btn-google, btn-facebook 이런 형태로 되어있어 네이버 로그인 기능을 만들었으니 Facebook 로그인 버튼을 Naver 로그인 버튼으로 교체를 하고자 btn-naver로 해봤다. 결과는 btn-naver라는 css가 없었다. 그래서 따로 css파일을 하나 만들어 추가를 해주었다. 그 부분이 위에서 263번째 라인이다. 소스는 아래와 같다.  

```css
.btn-naver {
    color: #fff;
    background-color: #19ce60;
    border-color: #15c654;
}

.btn-naver:hover {
    color: #fff;
    background-color: #077c12;
    border-color: #e6e6e6;
}

.btn-naver:focus, .btn-naver.focus {
    color: #fff;
    background-color: #30497c;
    border-color: #e6e6e6;
    box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.5);
}

.btn-naver.disabled, .btn-naver:disabled {
    color: #fff;
    background-color: #19ce60;
    border-color: #fff;
}

.btn-naver:not(:disabled):not(.disabled):active, .btn-naver:not(:disabled):not(.disabled).active,
.show > .btn-naver.dropdown-toggle {
    color: #fff;
    background-color: #2d4373;
    border-color: #dfdfdf;
}

.btn-naver:not(:disabled):not(.disabled):active:focus, .btn-naver:not(:disabled):not(.disabled).active:focus,
.show > .btn-naver.dropdown-toggle:focus {
    box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.5);
}
```

###### 이제 껍데기는 완성이 되었다. 로그인 화면을 만들었으니 이제 Interceptor를 만들어 보자.  
###### config.auth 패키지 밑에 CertificationInterceptor 클래스를 하나 생성한다. 해당 클래스는 HandlerInterceptor를 implements 하고 있으며 preHandle(컨트롤러 진입 전)에서 처리를 해주자.  
###### 소스는 다음과 같다.  

```java
package com.zzangho.project.springboot.config.auth;

import com.zzangho.project.springboot.config.auth.dto.SessionUser;
import com.zzangho.project.springboot.domain.user.User;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@Component
public class CertificationInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        System.out.println("============================= 인터셉터 시작 ==============================");
        HttpSession session = request.getSession();
        SessionUser loginVO = (SessionUser) session.getAttribute("user");

        if(ObjectUtils.isEmpty(loginVO)){
            System.out.println("============================= 로그인 정보 X ==============================");
            response.sendRedirect("/user/login");
            return false;
        }else{
            System.out.println("============================= 로그인 정보 O ==============================");
            session.setMaxInactiveInterval(30*60);
            return true;
        }

    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
                           ModelAndView modelAndView) throws Exception {
        // TODO Auto-generated method stub

    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
            throws Exception {
        // TODO Auto-generated method stub

    }
}
```

###### 단순히 세션을 조회하여 세션이 없으면 login페이지로 이동해라 이런형태이다.  
###### 이제 인터셉터를 인식할 수 잇게 WebConfig에 등록을 해보자. 소스는 다음과 같다.  

```java
package com.zzangho.project.springboot.config;

import com.zzangho.project.springboot.config.auth.CertificationInterceptor;
import com.zzangho.project.springboot.config.auth.LoginUserArgumentResolver;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.List;

@RequiredArgsConstructor
@Configuration
public class WebConfig implements WebMvcConfigurer {
    ...

    /*
     * 로그인 인증 Interceptor 설정
     * */
    @Autowired
    CertificationInterceptor certificationInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(certificationInterceptor)
                .addPathPatterns("/*")
                .excludePathPatterns("/user/**")
                .excludePathPatterns("/js/**")
                .excludePathPatterns("/css/**")
                .excludePathPatterns("/vendor/**");
    }
}

```

###### 아직 정확한건 아니지만 excludePathPatterns에 js, css, vendor를 설정 안해주니 interceptor에서 그 수만큼 login 페이지로 리다이렉션을 하였다. 해당 부분을 추가해주니 그런 현상은 없어졌다. 좀 더 테스트를 해봐야겠다.  
###### addInterceptors로 등록을 해주면 끝이다. (참 쉽죠잉?)  
###### 이제는 Login 페이지로 접속할 수 있게 IndexController에 등록을 해주자.  
```java
package com.zzangho.project.springboot.web;

import com.zzangho.project.springboot.config.auth.LoginUser;
import com.zzangho.project.springboot.config.auth.dto.SessionUser;
import com.zzangho.project.springboot.service.posts.PostsService;
import com.zzangho.project.springboot.web.dto.PostsResponseDto;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import javax.servlet.http.HttpSession;

@RequiredArgsConstructor
@Controller
public class IndexController {

    ...

    @GetMapping("/user/login")
    public String login() {
        System.out.println("login page!");
        return "login-page";
    }
}

```
###### 시스템을 재기동하고 접속을 해보자. 두둥  
###### ....................  
###### 접속이 안되었다. 왜그런가 생각을 해봤더니 SpringSecurity에서 막히는 듯 했다. Spring Security 설정 파일을 보니 login 페이지에 대한 처리가 없었다.  
###### Security 설정 파일에 다음과 같이 추가를 해주자.  

```java
package com.zzangho.project.springboot.config.auth;

import com.zzangho.project.springboot.domain.user.Role;
import lombok.RequiredArgsConstructor;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@RequiredArgsConstructor
@EnableWebSecurity  // Spring Security 설정들을 활성화시켜 줍니다.
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private final CustomOAuth2UserService customOAuth2UserService;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .csrf().disable()
                .headers().frameOptions().disable() // h2-console 화면을 사용하기 위해 해당 옵션들을 disable 합니다.
                .and()
                    .authorizeRequests()    // URL별 권한 관리를 설정하는 옵션의 시작점. authorizeRequest가 선언되야만 antMatchers 옵션을 사용할 수 있다.
                    .antMatchers("/", "/css/**", "/images/**", "/js/**", "/h2-console/**", "/vendor/**").permitAll()    // 전체 열람 권한
                    .antMatchers("/api/v1/**").hasRole(Role.USER.name())    // USER 권한을 가진 사람만 열람 권한
                    .anyRequest() // 설정된 값들 이외 나머지 URL들을 나타낸다.
                    .authenticated()    // 여기서는 authenticated()를 추가하여 나머지 URL들을 모두 인증된 사용자에게만 허용하게 한다.
                .and()
                    .oauth2Login()
                    .loginPage("/user/login")
                    .permitAll()
                .and()
                    .logout()
                        .logoutSuccessUrl("/user/login")    // 로그아웃 시
                .and()
                    .oauth2Login()  // OAuth2로그인 기능에 대한 여러 설정의 진입점
                        .userInfoEndpoint() // OAuth2 로그인 성공 이후 사용자 정보를 가져올 때의 설정들을 담당한다.
                            .userService(customOAuth2UserService);
                            // 소셜 로그인 성공 시 후속 조치를 진행할 UserService 인터페이스의 구현체를 등록한다.
        //                  // 리소스 서버에서 사용자 정보를 가져온 상태에서 추가로 진행하고자 하는 기능을 명시 할 수 있다.
    }
}

```

###### 위의 소스에서 .and().oauth2Login().loginPage("/user/login").permitAll() 이 부분을 추가해주면 접속이 된다. 아마도 oauth2Login시 로그인페이지를 사용자가 정의한걸로 사용할 때 쓰는 것 같다.(좀 더 공부해서 정확히 알아야 할듯...)  

###### 다시 시스템을 재기동하고 접속을 해보면 다음과 같이 화면이 뜰 것이다.  
![이미지]({{ site.url }}/images/로그인페이지after.png)

###### 그리고 로그인을 해보면 아주 잘 된다 ^_^
