---
layout: post
title: 엘라스틱서치 개념공부
summary: 열심히 기록하자!
author: Lee Chang Ho
date: '2020-12-22 16:33:00'
category: 프로젝트
published: true
image:  엘라스틱서치.png
tags:   검색엔진 elasticSearch
---

### 엘라스틱 서치 개념 정리

---

##### 엘라스틱 서치 장단점
---
+ 장점  
  - 오픈소스 검색엔진  
    엘라스틱서치는 아파치 재단의 루씬을 기반으로 개발된 오픈소스 검색엔진이다. 전 세계에서 수많은 사람들이 사용하고 있으며, 버그가 발생할 경우에도 대부분 빠르게 해결된다.   
  - 전문 검색  
    전문 검색이란 내용 전체를 색인해서 특정 단어가 포함된 문서를 검색하는 것을 말한다. 기존 관계형 데이터베이스는 전문 검색에 적합하지 않지만 엘라스틱서치는 다양한 기능별, 언어별 플로그인을 조합해 빠르게 검색할 수 있다.  
  - 통계 분석  
    비정형 로그 데이터를 수집하고 한곳에 모아 통계 분석을 할 수 있다. 엘라스틱서치와 키바나를 연결하면 실시간으로 쌓이는 로그를 시각화하고 분석할 수 있다.  
  - 스키마리스(Schemaless)  
    데이터베이스는 스키마라는 구조에 따라 데이터를 적합한 형탤 변경해서 저장하고 관리한다. 반면 엘라스틱서치는 정형화되지 않은 다양한 형태의 문서도 자동으로 색인하고 검색할 수 있다.  
  - RESTful API  
    엘라스틱서치는 HTTP 기반의 RESTful API를 지원하고 요청뿐 아니라 응답에도 JSON 형식을 사용해 개발 언어, 운영체제, 시스템에 관계없이 이기종 플랫폼에서도 이용 가능하다.  
  - 멀티테넌시(Multi-tenancy)  
    서로 상이한 인덱스일지라도 검색할 필드명만 같으면 여러 개의 인덱스를 한번에 조회할 수 있다.(서로 다른 인덱스를 하나로 묶어준다.. 이런뜻)  
  - Document-Oriented  
    여러 계층의 데이터를 JSON 형식의 구조화된 문서로 인덱스에 저장할 수 있다. 계층 구조로 문서도 한번의 쿼리로 쉽게 조회할 수 있다.  
  - **역색인**  
    검색엔진은 기본적으로 역색인 구조를 가지고 있다. 역색인이란 책 맨 뒷장을 보면 어떤 키워드가 몇 페이지에 있는지를 알려주는 페이지가 있는데 이게 바로 역색인 구조이다. 문서에서 키워드를 찾는 것이 아니라. 키워드를 통해 문서를 찾는 구조이다.  
  - 확장성과 가용성  
    엘라스틱서치를 분산 구성해서 확장한다면 대량의 문서를 좀 더 효율적으로 처리할 수 있다. 분산 환경에서 데이터는 샤드라는 작은 단위로 나뉘어 제공되며, 인덱스를 만들 때마다 샤드의 수를 조절할 수 있다. 이를 통해 데이터의 종류와 성격에 따라 데이터를 분산해서 빠르게 처리할 수 있다.  
+ 단점  
  - 실시간이 아니다  
    일반적으로 색인된 데이터는 통상적으로 1초 뒤에나 검색이 가능해진다. 색인 된 데이터는 내부적으로 커밋과 플러시 같은 복잡한 과정을 거치기 때문에 실시간이 아니다. 엄밀히 따지자면 준 실시간(Near Realtime)이라고 할 수 있다.  
  - 트랜잭션과 롤백 기능 지원 X  
    엘라스틱서치는 기본적으로 분산 시스템으로 구성된다. 전체적인 클러스터의 성능 향상을 위해 시스템적으로 비용 소모가 큰 롤백(Rollback)과 트랜잭션(Transaction)을 지원하지 않기 때문에 최악의 경우 데이터 손실의 위험이 있다.  
  - 데이터의 업데이트를 제공하지 않는다  
    엄밀히 말하자면 엘라스틱서치는 <u>업데이트 명령이 요청될 경우 기존 문서를 삭제하고 변경된 내용으로 새로운 문서를 생성하는 방식을 사용한다.</u> 이러한 이유로 단순 업데이트에 비해서는 상대적으로 많은 비용이 발생한다.   

##### 기본 용어
---
+ 인덱스  
  인덱스(Index)는 데이터 저장 공간이다. 하나의 인덱스는 하나의 타입만 가지며 하나의 무리적인 노드에 여러 개의 논리적인 인덱스를 생성할 수 있다. 검색 시 인덱스 이름으로 문서 데이터를 검색하며, 여러 개의 인덱스를 동시에 검색하는 것도 가능하다.  
  <u>엘라스틱서치를 분산 환경으로 구성하면 하나의 인덱스가 여러 노드에 분산 저장되어 관리된다.</u> 따라서 분산 처리에 따른 여러 이점을 누릴 수 있다.(이점 = 디스크 공간, request 처리 등이 아닐까 생각한다. 인덱스의 이름은 모두 <u>소문자</u>여야 하며 추가, 수정, 삭제, 검색은 RESTful API로 수행할 수 있다. 만약 인덱스가 없는 상태에서 데이터가 추가된다면 데이터를 이용해 인덱스가 자동으로 생성된다.  
+ 샤드  
  색인된 문서는 하나의 인덱스에 담긴다. 인덱스 내부에 색인된 데이터는 물리적인 공간에 여러 개의 파티션으로 나뉘어 구성되는데, 이 파티션을 엘라스틱서치에서는 샤드라고 부른다. 엘라스틱서치는 다수의 샤드로 문서를 분산 저장하고 있어 <u>데이터 손실 위험을 최소화할 수 있다.</u>  
+ 타입  
  타입(Type)은 인덱스의 논리적 구조를 의미하며, 인덱스 속성에 따라 분류하기도 한다. 엘라스틱서치 6.0버전 이하에서는 하나의 인덱스에 여러 타입을 설정 가능했지만 6.1 버전부터는 인덱스당 하나의 타입만 사용가능 하다.  
+ 문서  
  문서(Document)는 엘라스틱서치에서 데이터가 저장되는 최소 단위다.(즉, DB로 비유하면 raw라고 생각하면 된다) 기본적으로 JSON 포맷으로 데이터가 저장된다. 하나의 문서는 다수의 필드로 구성돼 있는데 각 필드는 데이터의 형태에 따라 용도에 맞는 데이터 타입(Data Type)을 정의해야 한다. 또한 문서는 중첩 구조를 지원하기 때문에 이를 이용해 문서 안에 문서를 지정하는 것도 가능하다.  
+ 필드  
  필드(Field)는 문서를 구성하기 위한 속성이라고 할 수 있다. 일반적으로 데이터베이스의 칼럼(Column)과 비교할 수 있으나 칼럼이 정적(Static)인 데이터 타입인 데 반해 필드는 좀 더 동적(Dynamic)인 데이터 타입이라고 할 수 있다.  
+ 매핑  
  매핑(Mapping)은 문서의 필드와 필드의 속성을 정의하고 그에 따른 색인 방법을 정의하는 프로세스다. 인덱스의 매핑 정보에는 여러 가지 데이터 타입을 지정할 수 있지만 필드명은 중복해서 사용할 수 없다.  
